// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`With Action Creators counterReducer1 1`] = `"T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<\\"ADD\\" | \\"INCREMENT\\", (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; }"`;

exports[`With Action Creators counterReducer2 1`] = `"T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<\\"INCREMENT\\", (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; }"`;

exports[`With Action Creators counterReducer3 1`] = `"T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<\\"ADD\\", (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends \\"INCREMENT\\", TTypeAction extends T.EmptyAction<\\"INCREMENT\\"> extends { type: TType; } ? { type: TType; } & T.EmptyAction<\\"INCREMENT\\"> : never, TCreator extends (...args: any[]) => T.EmptyAction<\\"INCREMENT\\">, TCreatorAction extends T.EmptyAction<\\"INCREMENT\\"> extends ReturnType<TCreator> ? ReturnType<TCreator> & T.EmptyAction<\\"INCREMENT\\"> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; } : T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.EmptyAction<\\"INCREMENT\\">) => number>; } : T.Reducer<number, T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & any; }; }; }; }; }; }; }; }; }; }; }"`;

exports[`With Action Creators counterReducer4 1`] = `"T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<\\"INCREMENT\\", (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends \\"ADD\\", TTypeAction extends T.PayloadAction<\\"ADD\\", number> extends { type: TType; } ? { type: TType; } & T.PayloadAction<\\"ADD\\", number> : never, TCreator extends (...args: any[]) => T.PayloadAction<\\"ADD\\", number>, TCreatorAction extends T.PayloadAction<\\"ADD\\", number> extends ReturnType<TCreator> ? ReturnType<TCreator> & T.PayloadAction<\\"ADD\\", number> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; } : T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, T.PayloadAction<\\"ADD\\", number>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number>) => number>; } : T.Reducer<number, T.PayloadAction<\\"ADD\\", number>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number>) => number>; handleAction: <TType extends Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & any; }; }; }; }; }; }; }; }; }; }; }"`;

exports[`With Action Types counterReducer1 1`] = `"T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<\\"ADD\\" | \\"INCREMENT\\", (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; }"`;

exports[`With Action Types counterReducer2 1`] = `"T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<\\"INCREMENT\\", (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; }"`;

exports[`With Action Types counterReducer3 1`] = `"T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<\\"ADD\\", (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends \\"INCREMENT\\", TTypeAction extends T.EmptyAction<\\"INCREMENT\\"> extends { type: TType; } ? { type: TType; } & T.EmptyAction<\\"INCREMENT\\"> : never, TCreator extends (...args: any[]) => T.EmptyAction<\\"INCREMENT\\">, TCreatorAction extends T.EmptyAction<\\"INCREMENT\\"> extends ReturnType<TCreator> ? ReturnType<TCreator> & T.EmptyAction<\\"INCREMENT\\"> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; } : T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.EmptyAction<\\"INCREMENT\\">) => number>; } : T.Reducer<number, T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.EmptyAction<\\"INCREMENT\\">, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & any; }; }; }; }; }; }; }; }; }; }; }"`;

exports[`With Action Types counterReducer4 1`] = `"T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<\\"INCREMENT\\", (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends \\"ADD\\", TTypeAction extends T.PayloadAction<\\"ADD\\", number> extends { type: TType; } ? { type: TType; } & T.PayloadAction<\\"ADD\\", number> : never, TCreator extends (...args: any[]) => T.PayloadAction<\\"ADD\\", number>, TCreatorAction extends T.PayloadAction<\\"ADD\\", number> extends ReturnType<TCreator> ? ReturnType<TCreator> & T.PayloadAction<\\"ADD\\", number> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; } : T.Reducer<number, T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number> | T.EmptyAction<\\"INCREMENT\\">) => number>; handleAction: <TType extends Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, T.PayloadAction<\\"ADD\\", number>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number>) => number>; } : T.Reducer<number, T.PayloadAction<\\"ADD\\", number>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: T.PayloadAction<\\"ADD\\", number>) => number>; handleAction: <TType extends Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; handleAction: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>[\\"type\\"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends { type: TType; } ? { type: TType; } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TCreator | TType[] | TCreator[], reducer: (state: number, action: TActionIntersection) => number) => [Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>] extends [never] ? T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & { handlers: Record<TActionIntersection[\\"type\\"], (state: number, action: Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>) => number>; } : T.Reducer<number, Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<T.PayloadAction<\\"ADD\\", number>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>> & any; }; }; }; }; }; }; }; }; }; }; }"`;
