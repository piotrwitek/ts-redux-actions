{"version":3,"file":"index.umd.js","sources":["../src/utils/validation.ts","../src/action.ts","../src/create-custom-action.ts","../node_modules/tslib/tslib.es6.js","../src/get-type.ts","../src/create-action.ts","../src/create-standard-action.ts","../src/create-async-action.ts","../src/create-reducer.ts","../src/is-of-type.ts","../src/is-action-of.ts","../src/create-action-deprecated.ts"],"sourcesContent":["import { ActionCreator, TypeMeta, TypeConstant } from '../type-helpers';\n\nexport function checkIsEmpty(arg: unknown, argPosition: number = 1) {\n  return arg == null;\n}\n\nexport function throwIsEmpty(argPosition: number = 1): never {\n  throw new Error(`Argument ${argPosition} is empty.`);\n}\n\nexport function checkValidActionCreator(\n  arg: unknown\n): arg is ActionCreator<TypeConstant> {\n  return typeof arg === 'function' && 'getType' in arg;\n}\n\nexport function checkInvalidActionCreator(arg: unknown) {\n  return !checkValidActionCreator(arg);\n}\n\nexport function throwInvalidActionCreator(argPosition: number = 1): never {\n  throw new Error(\n    `Argument ${argPosition} is invalid, it should be an action-creator instance from \"typesafe-actions\"`\n  );\n}\n\nexport function checkInvalidActionCreatorInArray(\n  arg: ActionCreator<TypeConstant> & TypeMeta<TypeConstant>,\n  idx: number\n): void | never {\n  if (arg == null) {\n    throw new Error(\n      `Argument contains array with empty element at index ${idx}`\n    );\n  } else if (arg.getType == null) {\n    throw new Error(\n      // tslint:disable-next-line:max-line-length\n      `Argument contains array with invalid element at index ${idx}, it should be an action-creator instance from \"typesafe-actions\"`\n    );\n  }\n}\n\nexport function checkValidActionType(arg: unknown): arg is string | symbol {\n  return typeof arg === 'string' || typeof arg === 'symbol';\n}\n\nexport function checkInvalidActionType(arg: unknown): arg is string | symbol {\n  return !checkValidActionType(arg);\n}\n\nexport function throwInvalidActionType(argPosition: number = 1): never {\n  throw new Error(\n    `Argument ${argPosition} is invalid, it should be an action type of type: string | symbol`\n  );\n}\n\nexport function checkInvalidActionTypeInArray(\n  arg: TypeConstant,\n  idx: number\n): void | never {\n  if (arg == null) {\n    throw new Error(\n      `Argument contains array with empty element at index ${idx}`\n    );\n  } else if (typeof arg !== 'string' && typeof arg !== 'symbol') {\n    throw new Error(\n      `Argument contains array with invalid element at index ${idx}, it should be of type: string | symbol`\n    );\n  }\n}\n\nexport function throwInvalidActionTypeOrActionCreator(\n  argPosition: number = 1\n): never {\n  throw new Error(\n    `Argument ${argPosition} is invalid, it should be an action-creator instance from \"typesafe-actions\" or action type of type: string | symbol`\n  );\n}\n","import { TypeConstant } from './type-helpers';\nimport {\n  checkIsEmpty,\n  throwIsEmpty,\n  checkInvalidActionType,\n  throwInvalidActionCreator,\n} from './utils/validation';\n\nexport function action<T extends TypeConstant, E>(\n  type: T,\n  payload: undefined,\n  meta: undefined,\n  error: E\n): { type: T; error: E };\n\nexport function action<T extends TypeConstant, M, E>(\n  type: T,\n  payload: undefined,\n  meta: M,\n  error: E\n): { type: T; meta: M; error: E };\n\nexport function action<T extends TypeConstant, P, E>(\n  type: T,\n  payload: P,\n  meta: undefined,\n  error: E\n): { type: T; payload: P; error: E };\n\nexport function action<T extends TypeConstant, P, M, E>(\n  type: T,\n  payload: P,\n  meta: M,\n  error: E\n): { type: T; payload: P; meta: M; error: E };\n\nexport function action<T extends TypeConstant, M>(\n  type: T,\n  payload: undefined,\n  meta: M\n): { type: T; meta: M };\n\nexport function action<T extends TypeConstant, P, M>(\n  type: T,\n  payload: P,\n  meta: M\n): { type: T; payload: P; meta: M };\n\nexport function action<T extends TypeConstant, P>(\n  type: T,\n  payload: P\n): { type: T; payload: P };\n\nexport function action<T extends TypeConstant>(type: T): { type: T };\n\n/**\n * @description flux standard action factory\n * @example\n * ```\n * const add = (amount: number, meta?: MetaShape) => action('INCREMENT', amount, meta);\n * ```\n */\nexport function action<\n  T extends TypeConstant,\n  P = undefined,\n  M = undefined,\n  E = undefined\n>(type: T, payload?: P, meta?: M, error?: E) {\n  if (checkIsEmpty(type)) {\n    throwIsEmpty(1);\n  }\n\n  if (checkInvalidActionType(type)) {\n    throwInvalidActionCreator(1);\n  }\n\n  return { type, payload, meta, error } as any;\n}\n","import { ActionCreator, TypeConstant } from './type-helpers';\nimport {\n  checkIsEmpty,\n  throwIsEmpty,\n  checkInvalidActionType,\n  throwInvalidActionType,\n} from './utils/validation';\n\n/**\n * @description create custom action-creator using constructor function with injected type argument\n */\nexport function createCustomAction<\n  T extends TypeConstant,\n  AC extends ActionCreator<T> = () => { type: T }\n>(type: T, createHandler?: (type: T) => AC): AC {\n  if (checkIsEmpty(type)) {\n    throwIsEmpty(1);\n  }\n\n  if (checkInvalidActionType(type)) {\n    throwInvalidActionType(1);\n  }\n\n  const actionCreator: AC =\n    createHandler != null ? createHandler(type) : ((() => ({ type })) as AC);\n\n  return Object.assign(actionCreator, {\n    getType: () => type,\n    // redux-actions compatibility\n    toString: () => type,\n  });\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { TypeConstant, ActionCreator, TypeMeta } from './type-helpers';\nimport {\n  checkIsEmpty,\n  throwIsEmpty,\n  checkInvalidActionCreator,\n  throwInvalidActionCreator,\n} from './utils/validation';\n\n/**\n * @description get the \"type literal\" of a given action-creator\n */\nexport function getType<T extends TypeConstant>(\n  actionCreator: ActionCreator<T> & TypeMeta<T>\n): T {\n  if (checkIsEmpty(actionCreator)) {\n    throwIsEmpty(1);\n  }\n\n  if (checkInvalidActionCreator(actionCreator)) {\n    throwInvalidActionCreator(1);\n  }\n\n  return actionCreator.getType!();\n}\n","import { TypeConstant, ActionCreator } from './type-helpers';\nimport { action } from './action';\n\nexport type PayloadMetaAction<\n  T extends TypeConstant,\n  P,\n  M\n> = P extends undefined\n  ? M extends undefined\n    ? { type: T }\n    : { type: T; meta: M }\n  : M extends undefined\n  ? { type: T; payload: P }\n  : { type: T; payload: P; meta: M };\n\n/**\n * @description typesafe action-creator factory\n */\nexport function createAction<\n  T extends TypeConstant,\n  AC extends ActionCreator<T> = () => { type: T }\n>(\n  type: T,\n  createHandler?: (\n    actionCallback: <P = undefined, M = undefined>(\n      payload?: P,\n      meta?: M\n    ) => PayloadMetaAction<T, P, M>\n  ) => AC\n): AC {\n  // validation is already done in action function\n\n  const actionCreator: AC =\n    createHandler == null\n      ? ((() => action(type)) as AC)\n      : createHandler(action.bind(null, type) as Parameters<\n          typeof createHandler\n        >[0]);\n\n  return Object.assign(actionCreator, {\n    getType: () => type,\n    // redux-actions compatibility\n    toString: () => type,\n  });\n}\n","import {\n  TypeConstant,\n  ActionBuilderConstructor,\n  ActionBuilderMap,\n} from './type-helpers';\nimport { createCustomAction } from './create-custom-action';\nimport {\n  checkIsEmpty,\n  throwIsEmpty,\n  checkInvalidActionType,\n  throwInvalidActionType,\n} from './utils/validation';\n\nexport interface ActionBuilder<T extends TypeConstant> {\n  <P = undefined, M = undefined>(): ActionBuilderConstructor<T, P, M>;\n  map<R, P = undefined, M = undefined>(\n    fn: (payload: P, meta: M) => R\n  ): ActionBuilderMap<T, R, P, M>;\n}\n\n/**\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createStandardAction<T extends TypeConstant>(\n  type: T\n): ActionBuilder<T> {\n  if (checkIsEmpty(type)) {\n    throwIsEmpty(1);\n  }\n\n  if (checkInvalidActionType(type)) {\n    throwInvalidActionType(1);\n  }\n\n  function constructor<P, M = undefined>(): ActionBuilderConstructor<T, P, M> {\n    return createCustomAction(type, _type => (payload: P, meta: M) => ({\n      type: _type,\n      payload,\n      meta,\n    })) as ActionBuilderConstructor<T, P, M>;\n  }\n\n  function map<R, P, M>(\n    fn: (payload: P, meta: M) => R\n  ): ActionBuilderMap<T, R, P, M> {\n    return createCustomAction(type, _type => (payload: P, meta: M) =>\n      Object.assign(fn(payload, meta), { type: _type })\n    ) as ActionBuilderMap<T, R, P, M>;\n  }\n\n  return Object.assign(constructor, { map });\n}\n","import {\n  TypeConstant,\n  ActionBuilderConstructor,\n  // ActionBuilderMap,\n} from './type-helpers';\nimport { createCustomAction } from './create-custom-action';\nimport { checkInvalidActionTypeInArray } from './utils/validation';\n\nexport interface AsyncActionBuilder<\n  T1 extends TypeConstant,\n  T2 extends TypeConstant,\n  T3 extends TypeConstant\n> {\n  // tslint:disable-next-line:callable-types\n  <P1, P2, P3>(): AsyncActionBuilderConstructor<T1, T2, T3, P1, P2, P3>;\n  // withMappers<A1 = undefined, P1 = undefined, A2 = undefined, P2 = undefined, A3 = undefined, P3 = undefined>(\n  //   requestMapper: (a?: A1) => P1,\n  //   successMapper: (a?: A2) => P2,\n  //   failureMapper: (a?: A3) => P3\n  // ): AsyncActionBuilderWithMappers<T1, T2, T3, A1, P1, A2, P2, A3, P3>;\n}\n\nexport type AsyncActionBuilderConstructor<\n  T1 extends TypeConstant,\n  T2 extends TypeConstant,\n  T3 extends TypeConstant,\n  P1,\n  P2,\n  P3\n> = {\n  request: ActionBuilderConstructor<T1, P1>;\n  success: ActionBuilderConstructor<T2, P2>;\n  failure: ActionBuilderConstructor<T3, P3>;\n};\n\n/**\n * implementation\n */\nexport function createAsyncAction<\n  T1 extends TypeConstant,\n  T2 extends TypeConstant,\n  T3 extends TypeConstant\n>(\n  requestType: T1,\n  successType: T2,\n  failureType: T3\n): AsyncActionBuilder<T1, T2, T3> {\n  [requestType, successType, failureType].forEach(\n    checkInvalidActionTypeInArray\n  );\n\n  function constructor<P1, P2, P3>(): AsyncActionBuilderConstructor<\n    T1,\n    T2,\n    T3,\n    P1,\n    P2,\n    P3\n  > {\n    return {\n      request: createCustomAction(requestType, type => (payload?: P1) => ({\n        type,\n        payload,\n      })) as ActionBuilderConstructor<T1, P1>,\n      success: createCustomAction(successType, type => (payload?: P2) => ({\n        type,\n        payload,\n      })) as ActionBuilderConstructor<T2, P2>,\n      failure: createCustomAction(failureType, type => (payload?: P3) => ({\n        type,\n        payload,\n      })) as ActionBuilderConstructor<T3, P3>,\n    };\n  }\n\n  return Object.assign(constructor);\n}\n\n// export type AsyncActionBuilderWithMappers<\n//   T1 extends StringType,\n//   T2 extends StringType,\n//   T3 extends StringType,\n//   A1 = undefined,\n//   P1 = undefined,\n//   A2 = undefined,\n//   P2 = undefined,\n//   A3 = undefined,\n//   P3 = undefined\n//   > = {\n//     request: ActionBuilderMap<T1, A1, P1>;\n//     success: ActionBuilderMap<T2, A2, P2>;\n//     failure: ActionBuilderMap<T3, A3, P3>;\n//   };\n\n// function withMappers<A1, P1, A2, P2, A3, P3>(\n//   requestMapper: (a?: A1) => P1,\n//   successMapper: (a?: A2) => P2,\n//   failureMapper: (a?: A3) => P3\n// ): AsyncActionBuilderWithMappers<T1, T2, T3, A1, P1, A2, P2, A3, P3> {\n//   return {\n//     request: createCustomAction(requestType, type => (payload?: A1) => ({\n//       type,\n//       payload: requestMapper != null ? requestMapper(payload) : undefined,\n//     })) as MapBuilder<T1, A1, P1>,\n//     success: createCustomAction(successType, type => (payload?: A2) => ({\n//       type,\n//       payload: successMapper != null ? successMapper(payload) : undefined,\n//     })) as MapBuilder<T2, A2, P2>,\n//     failure: createCustomAction(failureType, type => (payload?: A3) => ({\n//       type,\n//       payload: failureMapper != null ? failureMapper(payload) : undefined,\n//     })) as MapBuilder<T3, A3, P3>,\n//   };\n// }\n","// @ts-ignore\nimport { RootAction } from './';\nimport { getType } from './get-type';\nimport {\n  checkValidActionCreator,\n  checkValidActionType,\n  throwInvalidActionTypeOrActionCreator,\n} from './utils/validation';\nimport { Reducer, Action } from './type-helpers';\n\ntype HandleActionChainApi<\n  TState,\n  TNotHandledAction extends Action,\n  TRootAction extends Action\n> = <\n  TType extends TNotHandledAction['type'],\n  TTypeAction extends TNotHandledAction extends { type: TType }\n    ? TNotHandledAction\n    : never,\n  TCreator extends (...args: any[]) => TNotHandledAction,\n  TCreatorAction extends TNotHandledAction extends ReturnType<TCreator>\n    ? TNotHandledAction\n    : never,\n  TActionIntersection extends TTypeAction extends TCreatorAction\n    ? TTypeAction\n    : never\n>(\n  singleOrMultipleCreatorsAndTypes: TType | TType[] | TCreator | TCreator[],\n  reducer: (state: TState, action: TActionIntersection) => TState\n) => [Exclude<TNotHandledAction, TTypeAction & TCreatorAction>] extends [never]\n  ? Reducer<TState, TRootAction> & {\n      handlers: Record<\n        TActionIntersection['type'],\n        (state: TState, action: TRootAction) => TState\n      >;\n    }\n  : Reducer<TState, TRootAction> & {\n      handlers: Record<\n        TActionIntersection['type'],\n        (state: TState, action: TRootAction) => TState\n      >;\n      handleAction: HandleActionChainApi<\n        TState,\n        Exclude<TNotHandledAction, TTypeAction & TCreatorAction>,\n        TNotHandledAction\n      >;\n    };\n\nexport function createReducer<TState, TRootAction extends Action = RootAction>(\n  initialState: TState,\n  initialHandlers: Record<\n    RootAction['type'],\n    (state: TState, action: RootAction) => TState\n  > = {}\n) {\n  const handlers = { ...initialHandlers };\n\n  const rootReducer: Reducer<TState, TRootAction> = (\n    state = initialState,\n    action\n  ) => {\n    if (handlers.hasOwnProperty(action.type)) {\n      const reducer = handlers[action.type];\n      if (typeof reducer !== 'function') {\n        throw Error(\n          `Reducer under \"${action.type}\" key is not a valid reducer`\n        );\n      }\n      return reducer(state, action);\n    } else {\n      return state;\n    }\n  };\n\n  const handleAction = ((singleOrMultipleCreatorsAndTypes, reducer) => {\n    const creatorsAndTypes = Array.isArray(singleOrMultipleCreatorsAndTypes)\n      ? singleOrMultipleCreatorsAndTypes\n      : [singleOrMultipleCreatorsAndTypes];\n\n    const newHandlers: typeof initialHandlers = {};\n    creatorsAndTypes\n      .map(acOrType =>\n        checkValidActionCreator(acOrType)\n          ? getType(acOrType)\n          : checkValidActionType(acOrType)\n          ? acOrType\n          : throwInvalidActionTypeOrActionCreator()\n      )\n      .forEach(type => (newHandlers[type] = reducer));\n\n    return createReducer<TState, TRootAction>(initialState, {\n      ...handlers,\n      ...newHandlers,\n    });\n  }) as HandleActionChainApi<TState, TRootAction, TRootAction>;\n\n  return Object.assign(rootReducer, {\n    handlers: { ...handlers },\n    handleAction,\n  } as const);\n}\n","import {\n  checkInvalidActionTypeInArray,\n  checkIsEmpty,\n  throwIsEmpty,\n} from './utils/validation';\n/**\n * @description (curried assert function) check if action type is equal given type-constant\n * @description it works with discriminated union types\n */\nexport function isOfType<T extends string, A extends { type: string }>(\n  type: T | T[],\n  action: A\n): action is A extends { type: T } ? A : never;\n\n/**\n * @description (curried assert function) check if action type is equal given type-constant\n * @description it works with discriminated union types\n */\nexport function isOfType<T extends string>(\n  type: T | T[]\n): <A extends { type: string }>(\n  action: A\n) => action is A extends { type: T } ? A : never;\n\n/**\n * implementation\n */\nexport function isOfType<T extends string, A extends { type: T }>(\n  actionTypeOrTypes: T | T[],\n  action?: A\n) {\n  if (checkIsEmpty(actionTypeOrTypes)) {\n    throwIsEmpty(1);\n  }\n\n  const actionTypes = Array.isArray(actionTypeOrTypes)\n    ? actionTypeOrTypes\n    : [actionTypeOrTypes];\n\n  actionTypes.forEach(checkInvalidActionTypeInArray);\n\n  const assertFn = (_action: A) => actionTypes.includes(_action.type);\n\n  // 1 arg case => return curried version\n  if (action === undefined) {\n    return assertFn;\n  }\n  // 2 args case => invoke assertFn and return the result\n  return assertFn(action);\n}\n","import { TypeMeta } from './type-helpers';\nimport {\n  checkInvalidActionCreatorInArray,\n  checkIsEmpty,\n  throwIsEmpty,\n} from './utils/validation';\n\nexport type ActionCreator<T extends { type: string }> = ((\n  ...args: any[]\n) => T) &\n  TypeMeta<T['type']>;\n\n/**\n * @description (curried assert function) check if an action is the instance of given action-creator(s)\n * @description it works with discriminated union types\n */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  actionCreator: AC | AC[],\n  action: { type: string }\n): action is ReturnType<AC>;\n\n/**\n * @description (curried assert function) check if an action is the instance of given action-creator(s)\n * @description it works with discriminated union types\n */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  actionCreator: AC | AC[]\n): (action: { type: string }) => action is ReturnType<AC>;\n\n/**\n * implementation\n */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  actionCreatorOrCreators: AC | AC[],\n  action?: { type: string }\n) {\n  if (checkIsEmpty(actionCreatorOrCreators)) {\n    throwIsEmpty(1);\n  }\n\n  const actionCreators = Array.isArray(actionCreatorOrCreators)\n    ? actionCreatorOrCreators\n    : [actionCreatorOrCreators];\n\n  actionCreators.forEach(checkInvalidActionCreatorInArray);\n\n  const assertFn = (_action: { type: string }) =>\n    actionCreators.some(\n      actionCreator => _action.type === actionCreator.getType!()\n    );\n\n  // 1 arg case => return curried version\n  if (action === undefined) {\n    return assertFn;\n  }\n  // 2 args case => invoke assertFn and return the result\n  return assertFn(action);\n}\n","/**\n * DEPRECATED\n */\n\nimport { TypeConstant } from './type-helpers';\n\ninterface FSA<T extends TypeConstant, P = {}, M = {}, E = boolean> {\n  type: T;\n  payload?: P;\n  meta?: M;\n  error?: E;\n}\n\n/**\n * @deprecated\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createActionDeprecated<\n  T extends TypeConstant,\n  AC extends (...args: any[]) => FSA<T>\n>(actionType: T, creatorFunction: AC): AC;\n\n/**\n * @deprecated\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createActionDeprecated<\n  T extends TypeConstant,\n  AC extends () => { type: T }\n>(actionType: T): AC;\n\n/**\n *  implementation\n */\nexport function createActionDeprecated<\n  T extends TypeConstant,\n  AC extends (...args: any[]) => FSA<T>\n>(actionType: T, creatorFunction?: AC): AC {\n  let actionCreator: AC;\n\n  if (creatorFunction != null) {\n    if (typeof creatorFunction !== 'function') {\n      throw new Error('second argument is not a function');\n    }\n\n    actionCreator = creatorFunction as AC;\n  } else {\n    actionCreator = (() => ({ type: actionType })) as AC;\n  }\n\n  if (actionType != null) {\n    if (typeof actionType !== 'string' && typeof actionType !== 'symbol') {\n      throw new Error('first argument should be type of: string | symbol');\n    }\n  } else {\n    throw new Error('first argument is missing');\n  }\n\n  return actionCreator;\n}\n"],"names":["checkIsEmpty","arg","argPosition","throwIsEmpty","Error","checkValidActionCreator","throwInvalidActionCreator","checkInvalidActionCreatorInArray","idx","getType","checkValidActionType","checkInvalidActionType","throwInvalidActionType","checkInvalidActionTypeInArray","action","type","payload","meta","error","createCustomAction","createHandler","actionCreator","Object","assign","toString","__assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","bind","_type","map","fn","requestType","successType","failureType","forEach","request","success","failure","createReducer","initialState","initialHandlers","handlers","state","reducer","handleAction","singleOrMultipleCreatorsAndTypes","newHandlers","Array","isArray","acOrType","throwInvalidActionTypeOrActionCreator","actionTypeOrTypes","actionTypes","assertFn","_action","includes","undefined","actionCreatorOrCreators","actionCreators","some","actionType","creatorFunction"],"mappings":"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"}