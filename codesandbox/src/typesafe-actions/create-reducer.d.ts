import { RootAction } from '.';
export declare function createReducer<S, A extends {
    type: string;
} = RootAction>(initialState: S): ((state: S, action: A) => S) & {
    addHandler: <TType extends A["type"], TTypeAction extends A extends {
        type: TType;
    } ? A : never, TCreator extends (...args: any[]) => A, TCreatorAction extends A extends ReturnType<TCreator> ? A : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<A, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
        addHandler: <TType extends Exclude<A, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<A, TTypeAction & TCreatorAction> extends {
            type: TType;
        } ? {
            type: TType;
        } & Exclude<A, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<A, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<A, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<A, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
            addHandler: <TType extends Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                type: TType;
            } ? {
                type: TType;
            } & Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                addHandler: <TType extends Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                    type: TType;
                } ? {
                    type: TType;
                } & Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                    addHandler: <TType extends Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                        type: TType;
                    } ? {
                        type: TType;
                    } & Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                        addHandler: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                            type: TType;
                        } ? {
                            type: TType;
                        } & Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                            addHandler: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                                type: TType;
                            } ? {
                                type: TType;
                            } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                                addHandler: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                                    type: TType;
                                } ? {
                                    type: TType;
                                } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                                    addHandler: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                                        type: TType;
                                    } ? {
                                        type: TType;
                                    } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                                        addHandler: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                                            type: TType;
                                        } ? {
                                            type: TType;
                                        } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                                            addHandler: <TType extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>["type"], TTypeAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends {
                                                type: TType;
                                            } ? {
                                                type: TType;
                                            } & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TCreator extends (...args: any[]) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TCreatorAction extends Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends ReturnType<TCreator> ? ReturnType<TCreator> & Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> : never, TActionIntersection extends TTypeAction extends TCreatorAction ? TTypeAction : never>(actionsTypes: TType | TCreator | TType[] | TCreator[], actionsHandler: (state: S, action: TActionIntersection) => S) => Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<Exclude<A, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction>, TTypeAction & TCreatorAction> extends never ? (state: S, action: A) => S : ((state: S, action: A) => S) & {
                                                addHandler: any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
